@startuml initial_uml
!theme vibrant
skinparam Linetype polyline
skinparam Linetype ortho

package enums <<Folder>> {
    enum Color {
        YELLOW
        BLUE
        GREEN
        RED
        PINK
    }
    enum TowerColor {
        WHITE
        GRAY
        BLACK
    }
}

package model <<Folder>> {
    package card <<Folder>> {
        abstract class Card {

        }

        class AssistantCard {
            - id : int {readOnly}
            - int value {readOnly}
            - int steps {readOnly}

            + <<Constructor>> AssistantCard (id : int, value : int, steps : int)
            + getValue () : int
            + getSteps () : int
        }

        class CharacterCard {
            - id : int
            - coins : int
            - setup : String
            - effect : String
            - category : String
            - params : Map<String, Object>
            - hasExtraAction : boolean

            + <<Constructor>> CharacterCard (id : int, coins : int, setup : String, effect : String, category : String, params : Map<String, Object>)
            + <<Constructor>> CharacterCard (card : CharacterCard)
            + getId() : int
            + getCategory() : String
            # getParams() : Map<String, Object>
            + getCoins() : int
            + incrementCoinCost() : void
            + getEffect() : String
            + getHasExtraAction() : boolean
        }

        class CharacterCardFactory {
            + <<Constructor>> CharacterCardFactory()
            + setSubClass(card : CharacterCard) : CharacterCard
        }

        class Deck {
            + cards : List<Card> {readOnly}

            + <<Constructor>> Deck()
            + <<Constructor>> Deck (cards : List<Card>)
            + getCards() : List<T>
            + moveInCard (card : Card, src : Deck) : void
        }

        class InfluenceCharacterCard {
            - card : CharacterCard
            - towerInfluence : int
            - extraInfluence : int
            - colorWithoutInfluence : boolean

            + <<Constructor>> InfluenceCharacterCard (card : CharacterCard)
            + getTowerInfluence() : int
            + extraInfluence() : int
            + isColorWithoutInfluence() : boolean
        }

        class MotherNatureCharacterCard {
            - card : CharacterCard
            - extraMovement : int
            - extraResolving : boolean

            + <<Constructor>> MotherNatureCharacterCard (player : Player, card : CharacterCard)
            + getExtraMovement() : int
            + isExtraResolving() : boolean
        }

        class MovementCharacterCard {
            - card : CharacterCard
            - extraControl : int
            - possibleExchange : int
            - numOfStudentsToReturn : int

            + <<Constructor>> InfluenceCharacterCard (card : CharacterCard)
            + getExtraControl() : int
            + getPossibleExchange() : int
            + getNumOfStudentsToReturn() : boolean
        }

        Card <|-- AssistantCard
        Card <|-- CharacterCard

        CharacterCard <|-- InfluenceCharacterCard
        CharacterCard <|-- MotherNatureCharacterCard
        CharacterCard <|-- MovementCharacterCard

        Deck *--- Card
    }

    class Board<T> {
        - pawns : List<T> {readOnly}

        + <<Constructor>> Board()
        + <<Constructor>> Board(pawns : List<T>)
        + getPawns() : List<T>
        + getNumPawns() : int
        + moveInPawn(pawn : T, src : Board<T>) : void
    }

    class Cloud {
        + <<Constructor>> Cloud (students : List<Student>)
    }

    Board <|-- Cloud : <<bind>> T -> Student

    class Handler {
        players : List<Player>

        # <<Constructor>> Handler(players : List<Player>)
        # professorControl(currentPlayer : Player, color : Color, startingProfBoard : Board<Professor>) : void
        # motherNatureMovement (currentPlayer : Player, motherNature : MotherNature, stepsChoice : int) : void
        # resolveIsland (island : Island, player : Player) : int
        # resolveIslandHelper (island : Island, player : Player, influence : int) : int
        # getMostInfluentialPlayer (currentPlayer : Player, island : Island) : Player
        # switchTowers (island : Island, newOwner : Player): void
        # unifyIsland(island : Island) : void
        # extraAction (currentPlayer : Player, model : Model, values : int[]) : void
        # getProfessor (color : Color, startingProfBoard : Board<Professor>): Professor
        # getProfessorBoard (color : Color, startingProfBoard : Board<Professor>): Board<Professor>
        # getNumStudentsDR (player : Player, color: Color) : int
    }

    class Island {
        - ID : int
        - towerBoard : Board<Tower>
        - nextIsland : Island
        - prevIsland : Island
        - unifyNext : boolean
        - unifyLeft : boolean

        + <<Constructor>> Island (ID : int)
        # setTower(tower : Tower) : void
        # getTower(): Tower
        # getNextIsland() : Island
        # getPrevIsland() : Island
        # setNextIsland(nextIsland : Island) : void
        # setPrevIsland(prevIsland : Island) : void
        # isUnifyNext() : boolean
        #  isUnifyPrev() : boolean
        # unifyToNext() : void
        # unifyToPrev() : void
        # countStudentsByColor(color : Color) : int
        # getId() : int
    }

    Board <|-- Island : <<bind>> T -> Student

    class Model {
        - players : List<Player> {readOnly}
        - islands : List<Island> {readOnly}
        - clouds : List<Cloud> {readOnly}
        - motherNature : MotherNature {readOnly}
        - characterCards : List<CharacterCard> {readOnly}
        - coinReserve : int
        - startingProfessorBoard : Board<Professor>
        - bag : StudentBag
        - numStudentToMove : int
        - controller : Controller
        - handler : Handler
        - isThereWinner : boolean
        - winner : Player

        + <<Constructor>> Model (players : List<Player>, islands : List<Island>, clouds : List<Cloud>, motherNature : MotherNature, characterCards : List<CharacterCard>, coinReserve : int, startingProfessorBoard : Board<Professor>, bag : StudentBag, numStudentToMove : int)
        + playAssistantCard (playerId : int, choice : int) : void
        + playCharacterCard (playerId : int, choice : int) : void
        + moveStudentToDiningRoom (playerId : int, choice : int) : void
        + moveStudentToIsland (playerId : int, studentChoice : int, islandChoice : int)
        + moveMotherNature (playerId : int, stepsChoice : int) : void
        + addStudentsToCloud () : void
        + getMotherNature () : MotherNature
        + getProfessors() : List<Professor>
        + getClouds() : List<Cloud>
        + takeStudentsFromCloud (playerId : int, choice : int) : void
        + extraAction (values : int[]) : void
        + getCharacterCards() : List<CharacterCard>
        + getPlayers() : List<Player>
        + getCoinReserve() : int
        + resetHandler() : void
        # getIslands() : List<Island>
        # returnStudentsToBag (color : Color, num : int)
        # isThereWinner() : Player
        # playerHasFinishedTowers() : boolean
        # threeGroupsIslandRemaining() : boolean
        # studentBagIsEmpty : Player
        # anyPlayerHasFinishedAssistantCards() : Player
        - numOfGroupsOfIslands () : int
        - playerWithMostTowersOrProfessors() : Player
        - playerWithMostProfessors() : Player
        - aPlayerHasFinishedAssistantCards() : boolean
        + getController() : Controller
        + getIsThereWinner() : boolean
        + setIsThereWinner(isThereWinner : boolean) : void
        + setWinner(player : Player) : void
        + getWinner() : Player
    }

    class ModelBuilder {
        - numStudentToMoveMap : Map<Integer, Integer>

        + buildModel (names : List<String>) : Model
        - buildPlayers (names : List<String>, bag : StudentBag) : List<Player>
        - buildEntrance (num : int, bag : StudentBag) : List<Student>
        - buildTowers (num : int, color : TowerColor) : List<Tower>
        - buildStudentBag () : StudentBag
        - buildIslands() : List<Island>
        - buildProfessorBoard() : Board<Professor>
        - buildClouds (num : int) : List<Cloud>
        - buildAssistantCards() : List<AssistantCard>
        - buildCharacterCards() : List<CharacterCard>
    }

    Model <|-- ModelBuilder

    class ModelSerializable {
        - schools : List<SchoolSerializable>
        - coins : List<Integer>
        - assistantsCards : List<List<AssistantCard>>
        - coinReserve : int
        - islands : List<IslandSerializable>
        - clouds : List<CloudSerializable>
        - characterCards : List<CharacterCardSerializable>
        - professors : List<Color>
        - options : Map<Integer, String>

        + <<Constructor>> ModelSerializable (model : Model)
        + getEntranceByPlayerId (playerId : int) : List<Color>
        + getDRByPlayerAndColor (playerId : int, color : Color) : int
        + getStudentOnIslandById (islandId : int) : int
        + getStudentOnCloud (cloudId : int) : int
        + getCharacterCardCost (characterId : int) : int
        + getMNPosition () : int
    }

    class SchoolSerializable {
        - diningRoom : Map<Color, Integer>
        - entrance : List<Color>
        - profTable : List<Color>
        - numTowers : int
        - towerColor : TowerColor

        - <<Constructor>> SchoolSerializable (school : School, towerColor : TowerColor)
    }

    class IslandSerializable {
        - students : Map <Color, Integer>
        - towerPresence : boolean
        - color : TowerColor
        - motherNaturePresence : boolean

        - <<Constructor>> IslandSerializable (island : Island)
    }

    class CharacterCardSerializable {
        - id : int
        - effect : String
        - cost : int

        - <<Constructor>> CharacterCardSerializable (card : CharacterCard)
    }

    class CloudSerializable {
        - students : List<Color>

        - <<Constructor>> CloudSerializable (cloud : CLoud)
    }

    ModelSerializable +-- SchoolSerializable
    ModelSerializable +-- IslandSerializable
    ModelSerializable +-- CharacterCardSerializable
    ModelSerializable +-- CloudSerializable

    class MotherNature {
        - position : Island

        + <<Constructor>> MotherNature(position : Island)
        + getPosition() : Island
        + stepsToMove(steps : int) : void
    }

    Island <-DOWN- MotherNature

    class MotherNatureHandler {
        - card : MotherNatureCharacterCard

        # <<Constructor>> MotherNatureHandler (players : List<Player>, card : MotherNatureCharacterCard)
        # motherNatureMovement (currentPlayer : Player, motherNature : MotherNature) : void
        # extraAction (currentPlayer : Player, model : Model, values : int[]) : void
    }

    MotherNature <|-- MotherNatureHandler
    Handler <--- MotherNatureHandler

    class MovementHandler {
        - card : MovementCharacterCard

        # <<Constructor>> MovementHandler (players : List<Player>, card  MovementCharacterCard)
        # extraAction (currentPlayer : Player, model : Model, values : int[]) : void
        # professorControl (currentPlayer : Player, color : Color, startingProfBoard : Board<Professor>) : void
    }
    Handler <--- MovementHandler


    class NoEntryTile {
        - island : Island

        + <<Constructor>> NoEntryTile (island : Island)
        + getIsland() : Island
    }

    abstract class Pawn<T> {
        - color : T {readOnly}

        + <<Constructor>> Pawn (color : T)
        + getColor() : T
    }

    class Player {
        - nickname : String {readOnly}
        - school : School {readOnly}
        - towerColor : TowerColor {readOnly}
        - id : int {readOnly}
        - coins : int {readOnly}
        - assistantCardDeck : Deck<AssistantCard>
        - discardPileDeck : Deck<AssistantCard>

        + <<Constructor>> Player (id : int, nickname : String, students : List<Student>, towers : List<Tower>, assistantCardDeck : Deck)
        # getId() : int
        # getSchool() : School
        + getTowerColor : TowerColor
        + getNickname() : String
        # getCoins : int
        # playAssistantCard (index : int) : void
        + getAssistantCards() : List<AssistantCard>
        # playCharacterCard (card : CharacterCard) : void
        + getLastAssistantCard() : AssistantCard
        # moveStudentDiningRoom (student : Student, coinReserve : int) : boolean
        # moveStudentIsland (student : Student, island : Island) : void
        # takeStudentsFromCloud (cloud : Cloud) : void
        # returnStudentsToBag (bag : StudentBag, color : Color, num : int) : void
        # exchangeStudentsDiningRoomEntrance (color : Color, entrancePawnPosition : int) : void
        # getAssistantCardDeckSize() : int
       }


    class Professor {
        + <<Constructor>> Professor (color : Color)
    }
    Pawn <|-- Professor
    Color <... Professor

    Pawn <|-- Professor : <<bind>> T -> Color

    class School {
        - entrance : Board<Student>
        - diningRoom : Map<Color, Board<Student>>
        - professorsTable : Board<Professor>
        - towersBoard : Board<Tower>

        # <<Constructor>> School (students : List<Student>, towers : List<Tower>)
        # getEntrance() : Board<Student>
        # getDiningRoomByColor (color : Color) : Board<Student>
        # getProfessorsTable() : Board<Professor>
        # getTowersBoard() : Board<Tower>
        # moveStudentDiningRoom(student : Student) : boolean
        # moveStudentIsland(student : Student, island : Island) : void
        # takeStudentFromCloud(cloud : Cloud) : void
        # returnStudentsToBag (bag : StudentBag, color : Color, num : int)
        # setProfessor (professor : Professor, src : Board<Professor>)
        # exchangeStudentsDiningRoomEntrance (color : Color, entrancePawnPosition : int) : void
    }

    Color <... School
    Board *-UP- School

    class Student {
        # <<Constructor>> Student (color : Color)
    }

    Pawn <|-- Student : <<bind>> T -> Color
    Color <... Student

    class StudentBag {
        # extractStudentAndMove (destination : Board<Student>) : void
    }

    Board <|-- StudentBag : <<bind>> T -> Student

    class Tower {
        - owner : Player

        + <<Constructor>> Tower (color : TowerColor)
        + setOwner(owner : Player) : void
        + getOwner() : Player
    }

    Pawn <|-- Tower : <<bind>> T -> TowerColor
    TowerColor <... Tower

}

package Controller <<Folder>> {
    class ActionPhase {

    }
}


@enduml
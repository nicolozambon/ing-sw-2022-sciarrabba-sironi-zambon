@startuml initial_uml
!theme vibrant
skinparam Linetype polyline
skinparam Linetype ortho

package model <<Folder>> {
    enum Color {
        YELLOW
        BLUE
        GREEN
        RED
        PINK
    }

    enum TowerColor {
        WHITE
        GRAY
        BLACK
    }

    class Game {
        - ArrayList<Player> playerOrder

        + <<constructor>>Game()
        + void round()
        + void addPlayer(Player)
    }

    class Board<T> {
        + List<T> pawns

        + <<constructor>>Board()
        + <<constructor>>Board(List<T>)
        + List<T> getPawns()
        + T getPawn()
        + boolean addPawns(List<T>)
        + boolean addPawn(T)
    }
    
    abstract class Pawn<T> {
        - T color

        + <<constructor>>Pawn(T)
        + T getColor()
    }

    abstract class Card{
        + <<constructor>>Card(Lorem ipsum)
    }

    class Player {
        - String nickname
        + School school

        + <<constructor>>Player(String, List<Student>, List<Tower>)
        + String getNickname()
    }

    class Island {
        - Tower tower

        + <<constructor>>Island(List<Student>)
        + Tower setTower()
        + Tower getTower()
        + Player getInfluencer()
        - int countByColor(Color)

    }
    
    class School {
        - Player owner
        + Board diningRoom
        + Board entrance
        + Board professorsTable
        + Board towersBoard

        + <<constructor>>School(Player, List<Student>, List<Tower>)
        + Player getOwner()
    }

    class Cloud {
        + <<constructor>>Cloud(List<Student>)
    }

    class Professor {
        + <<constructor>>Professor(Color)
    }

    class Student {
        + <<constructor>>Student(Color)
    }

    class Tower {
        + Player owner

        + <<constructor>>Tower(Player, TowerColor)
    }

    class MotherNature {
        - private Island position

        + <<constructor>>MotherNature(Island)
        + Island getPosition()
        + Island setPosition(Island)
    }

    class AssistantCard {
        - int value
        - int movement
    }

    class CharacterCard {
        - CharacterCardEffect effect
    }

    class Deck {
        - ArrayList<Card> cardArrayList
        + <<constructor>>Deck(ArrayList<Card>)
        + Card extractCard()
    }

    class Coin {
        - CharacterCard card
        + CharacterCard getCard()
    }

    class NoEntryTile {
        - Island island
        + Island getPosition()
    }

    NoEntryTile -UP-> Island
    CharacterCard <-- Coin

    Card <|-DOWN- AssistantCard
    Card <|-DOWN- CharacterCard

    Board <|-DOWN- "<<bind>> T->Student" Island
    Board <|-DOWN- Cloud : <<bind>> T->Student

    School --* Board

    Pawn <|-DOWN- Professor : <<bind>> T->Color
    Pawn <|-DOWN- Student : <<bind>> T->Color
    Pawn <|--- Tower : <<bind>> T->TowerColor

    MotherNature -UP-> Island

    Deck *-DOWN- Card
    Deck <-UP- Player

    Game -DOWN-> Player
    Game --> School
    Game -RIGHT-> Pawn
    
    Color <.UP. Professor
    Color <.UP. Student

    TowerColor <.UP. Tower
}

@enduml
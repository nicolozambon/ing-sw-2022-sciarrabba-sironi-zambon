@startuml initial_uml
!theme vibrant
skinparam Linetype polyline
skinparam Linetype ortho

package enums <<Folder>> {
        enum Color {
                YELLOW
                BLUE
                GREEN
                RED
                PINK
            }

            enum TowerColor {
                WHITE
                GRAY
                BLACK
            }
}

package model <<Folder>> {
    package component <<Folder>> {
        package card <<Folder>> {
            abstract class Card {

            }

            class AssistantCard {
                - id : int {readOnly}
                - String path {readOnly}
                - int value {readOnly}
                - int steps {readOnly}

                + <<Constructor>> AssistantCard (id : int, path : String, value : int, steps : int)
                + getValue () : int
                + getSteps () : int
            }

            class CharacterCard {
                - id : int
                - res_path : String
                - coins : int
                - setup : String
                - effect : String
                - category : String
                - params : Map<String, Object>
                - hasBeenPlayed : boolean

                + <<Constructor>> CharacterCard (id : int, res_path : String, coins : int, setup : String, effect : String, category : String, params : Map<String, Object>, hasBeenPlayed : boolean)
                + <<Constructor>> CharacterCard (CharacterCard : CharacterCard)
                + getId() : int
                # getParams() : Map<String, Object>
                + getCoins() : int
            }

            class CharacterCardFactory {
                + <<Constructor>> CharacterCardFactory()
                + setSubClass(card : CharacterCard) : CharacterCard
            }

            class Deck {
                + cards : List<Card> {readOnly}

                + <<Constructor>> Deck()
                + <<Constructor>> Deck (cards : List<Card>)
                + shuffleDeck (deck : Deck) : void
                + moveInCard (card : Card, src : Deck) : void
            }

            class InfluenceCharacterCard {
                - card : CharacterCard
                - towerInfluence : int
                - extraInfluence : int
                - colorWithoutInfluence : boolean

                + <<Constructor>> InfluenceCharacterCard (card : CharacterCard)
                + getTowerInfluence() : int
                + extraInfluence() : int
                + isColorWithoutInfluence() : boolean
            }

            class MotherNatureCharacterCard {
                - card : CharacterCard
                - extraMovement : int
                - extraResolving : boolean

                + <<Constructor>> MotherNatureCharacterCard (player : Player, card : CharacterCard)
                + getExtraMovement() : int
                + isExtraResolving() : boolean
            }

            class MovementCharacterCard {
                - card : CharacterCard
                - towerInfluence : int
                - extraInfluence : int
                - colorWithoutInfluence : boolean

                + <<Constructor>> InfluenceCharacterCard (card : CharacterCard)
                + getTowerInfluence() : int
                + getExtraInfluence() : int
                + isColorWithoutInfluence() : boolean
            }

            Card <|-- AssistantCard
            Card <|-- CharacterCard

            CharacterCard <|-- InfluenceCharacterCard
            CharacterCard <|-- MotherNatureCharacterCard
            CharacterCard <|-- MovementCharacterCard

            Deck *--- Card
        }

        class Board<T> {
            - pawns : List<T> {readOnly}

            + <<Constructor>> Board()
            + <<Constructor>> Board(pawns : List<T>)
            + getPawns() : List<T>
            + getNumPawns() : int
            + moveInPawn(pawn : T, src : Board<T>) : boolean
        }

        class Cloud {
            + <<Constructor>> Cloud (students : List<Student>)
        }

        Board <|-- Cloud : <<bind>> T -> Student

        class Coin {

        }

        class Island {
            - ID : int
            - tower : Tower
            - nextIsland : Island
            - prevIsland : Island
            - linkNext : boolean
            - linkPrev : boolean

            + <<Constructor>> Island (ID : int, students : List<Student>, prev : Island, next : Island)
            + setTower(tower : Tower) : Tower
            + getTower(): Tower
            + getNextIsland() : Island
            + isLinkNext() : boolean
            + isLinkPrev() : boolean
            + linkToNext() : void
            + linkToPrev() : void
        }

        Board <|-- Island : <<bind>> T -> Student

        class MotherNature {
            - position : Island

            + <<Constructor>> MotherNature(position : Island)
            + getPosition() : Island
            + stepsToMove(steps : int) : void
        }

        Island <-DOWN- MotherNature

        class NoEntryTile {
            - island : Island

            + <<Constructor>> NoEntryTile (island : Island)
            + getIsland() : Island
        }

        class Pawn<T> {
            - color : T {readOnly}

            + <<Constructor>> Pawn (color : T)
            + getColor() : T
        }

        class Professor {
            + <<Constructor>> Professor (color : Color)
        }
        Pawn <|-- Professor
        Color <... Professor
    }
        Pawn <|-- Professor : <<bind>> T -> Color

        class School {
            - owner : Player
            - entrance : Board<Student>
            - diningRoom : Map<Color, Board<Student>>
            - professorsTable : Board<Professor>
            - towersBoard : Board<Tower>

            + <<Constructor>> School (owner : Player, students : List<Student>, towers : List<Tower>)
            + getOwner() : Player
            + getEntrance() : Board<Student>
            + getDiningRoomByColor (color : Color)
            + getProfessorsTable() : Board<Professor>
            + getTowersBoard() : Board<Tower>
            + moveStudentDiningRoom(student : Student) : boolean
            + moveStudentIsland(student : Student, island : Island) : void
            + takeStudentFromCloud(cloud : Cloud) : void
            + controlProfessor (professor : Professor, src : Board<Professor>) : void
            + takeInTower (tower : Tower) : void
            + takeOutTower() : Tower
        }

        Color <... School
        Board *-UP- School

        class Student {
            + <<Constructor>> Student (color : Color)
        }

        Pawn <|-- Student : <<bind>> T -> Color
        Color <... Student

        class StudentBag {
            + extractStudentAndMove (destination : Board<Student>) : void
        }

        Board <|-- StudentBag : <<bind>> T -> Student

        class Tower {
            + <<Constructor>> Tower (color : TowerColor)
        }
        Pawn <|-- Tower : <<bind>> T -> TowerColor
        TowerColor <... Tower

   package round <<Folder>> {
        package handler <<Folder>> {
            class Handler {
                - actualPlayer : Player

                + <<Constructor>> Handler (player : Player)
                + resolveIsland (motherNature : MotherNature, otherPlayers : List<Player>) : void
                + professorControl (otherPlayers : List<Player>) : void
                + motherNatureMovement (player : Player, motherNature : MotherNature, steps_choice : int) : void
                + extraAction () : void
            }

            class HandlerFactory {
                - card : CharacterCard

                + <<Constructor>> HandlerFactory (card : CharacterCard)
                + buildHandler (player : Player) : Handler
            }

            class InfluenceModifier {
                + <<Constructor>> InfluenceModifier (player : Player, card : InfluenceCharacterCard)
                + resolveIsland (motherNature : MotherNature, otherPlayers : List<Player>) : void
            }

            Handler <|-- InfluenceModifier

            class MotherNatureModifier {
                + <<Constructor>> MotherNatureModifier (player : Player, card : MotherNatureCharacterCard)
                + motherNatureMovement (player : Player, motherNature : MotherNature, steps_choice : int)
            }

            Handler <|-- MotherNatureModifier

            class MovementModifier {
                + <<Constructor>> MovementModifier (player : Player, card : MovementCharacterCard)
                + professorControl (otherPlayers : List<Player>) : void
                + extraAction () : void
            }

            Handler <|-- MovementModifier
        }

        class ActionPhase {
            - actualPlayer : Player
            - otherPlayers : List<Player>
            - callableMethod : Map<String, Integer>
            - handler : Handler

            + <<Constructor>> ActionPhase (player : Player, otherPlayers : List<Player>, numOfStudentToMove : int)
            + playCharacterCard (card : CharacterCard) : void
            + moveStudentToDiningRoom (student : Student, coinSrc : List<Coin>) : void
            + professorControl () : void
            + moveStudentToIsland (student : Student, island : Island) : void
            + moveMotherNature (motherNature : MotherNature, steps : int) : void
            + resolveIsland (motherNature : MotherNature) : void
            + getStudentsFromCloud (cloud : Cloud) : void
            + endActionPhase() : void
        }

        class PlanningPhase {
            + addStudentsToCloud (clouds : List<Cloud>, bag : StudentBag) : void
            + playAssistantCard (player : Player, choice : int)
        }

        class Round {
            - playersToPlay : List<Player>
            - playersHavePlayed : List<Player>
            - islands : List<Island> {readOnly}
            - clouds : List<Cloud> {readOnly}
            - motherNature : MotherNature {readOnly}
            - characterCards : List<CharacterCard> {readOnly}
            - coins : List<Coin>
            - isPlanningFinished : boolean
            - planning : PlanningPhase
            - action : ActionPhase
            - numStudentToMove : int {readOnly}

            + <<Constructor>> Round (playersToPlay : List<Player>, islands : List<Island>, clouds : List<Cloud>, motherNature : MotherNature, characterCards : List<CharacterCard>, coins : List<Coin>, bag : StudentBag, numStudentToMove : int)
            + playActionPhase (player_id : int) : void
            + playAssistantCardForPlayer (player_id : int, choice : int) : void
            + orderPlayersForAction () : void
            + orderPlayersForNextRound() : void

        }
   }

   class Game {
        - numOfStudents : Map<Integer, Integer>
        - players : ArrayList<Player>
        - cloud1 : Cloud
        - cloud2 : Cloud
        - cloud3 : Cloud

        + <<Constructor>> Game()
        + getPlayerOrder() : ArrayList<Player>
        + addPlayer (player : Player)
        + isThereWinner() : Player
   }

   class Init {
        - assistants : AssistantCard[]
        - characters : CharacterCard[]
        - selectedCharacterCards : ArrayList<CharacterCard>

        + <<Constructor>> Init()
        + getAssistantsConfiguration() : AssistantCard[]
        + getCharactersConfiguration() : CharacterCard[]
        - readCardsConfiguration() : void
        - chooseCharacterCards () : void
   }

   class Player {
        - nickname : String {readOnly}
        - school : School {readOnly}
        - id : int {readOnly}
        - coins : List<Coin> {readOnly}
        - assistantCardDeck : Deck
        - discardPileDeck : Deck

        + <<Constructor>> Player (nickname : String, students : List<Student>, towers : List<Tower>, id : int, ACD : Deck, DPD : Deck, coin : Coin)
        + getSchool() : School
        + getNickname() : String
        + playAssistantCard (index : int) : void
        + playCharacterCard (card : CharacterCard) : void
        + getLastAssistantCard() : AssistantCard
        + moveStudentDiningRoom (student : Student, coins : List<Coin>)
        + moveStudentIsland (student : Student, island : Island) : void
        + chooseCloud (cloud : Cloud)
   }
}

CharacterCard <--- CharacterCardFactory
Player <-UP- Game
Init <-UP- Game

@enduml